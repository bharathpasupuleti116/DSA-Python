Recursion

What is Recursion?

The process in which a function calls itself directly or indirectly is called recursion and the corresponding function is called a recursive function.

A recursive function solves a particular problem by calling a copy of itself and solving smaller subproblems of the original problems.

Why Recursion?

1. Simplicity and elegance
2. Divide and conquer
3. Handling complex data structures
4. Dynamic programming and memoization
5. Flexibility

How Recursion Works?

1. Base Case
2. Recursive Case
3. Progress towards Base Case
4. Stack Frame
5. Backtracking and Combining Solutions
6. Termination

Program:

def factorial(n):
    if n == 0: ---> Base Case
        return I
    else:
        return n * factorial(n-l) ---> Recursive Case
result = factorial(5)
print(result)

Base Case:

These base cases serve as the stopping
condition for the recursion, preventing it
from going on indefinitely.

For example, in the factorial function, the base case is when n equals 0, at which point the function returns 1.

Recursive Case:

The recursive case defines how the problem is reduced into smaller sub-problems.

In the factorial function, the recursive case is defined as calling the function itself with the argument n decreased by 1, which breaks the problem down into smaller instances until it reaches the base case.

Progress towards Base Case:

It's crucial that each recursive call makes progress towards reaching a base case. Otherwise, the recursion won't terminate,
leading to infinite recursion and causing a
stack overflow error.

Stack Frame:

Each recursive call creates a new stack frame in memory to store its local variables, parameters, and return address.These stack frames form a stack data structure, known as the "call stack" or "recursion stack." The call stack grows with each recursive call and shrinks as the recursive calls complete.


Backtracking and Combining Solutions:

Once a base case is reached, the recursion starts to unwind or backtrack. The function returns the result of the base case to its caller and combines it with the results from other recursive calls as needed to solve larger instances of the problem.

Termination:

Eventually, all recursive calls will reach the
base case(s), and the recursion will terminate. At this point, the final result is computed and returned to the original caller.

Types of Recursion:

1. Linear Recursion:

In linear recursion, each recursive call invokes only one subsequent call. It's the most straightforward form of recursion.

Example: computing factorial.

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-l)

2. Tail Recursion:

In tail recursion, the recursive call is the last operation performed by the function before returning.

Example: calculating the sum of a list.

def sum_list(lst, total=()):
    if not 1st:
        return total
    else:
        return sum_list(lst[1:], total + lst[0])

3. Binary Recursion:

Binary recursion involves making two recursive calls within the function. This type of recursion is common in problems that involve dividing the problem space into two parts.

Example: Binary search.

def binary_search(arr,target,low=0,high=None):
    if high is None:
        high = len(arr) - 1
    if low > high:
        return - 1
    mid = (low + high) // 2
    if arr[mid] == target:
        return mid
    elif arr[mid] < target:
        return binary_search(arr, target, mid+1, high)
    else:
        return binary_search(arr, target, low, mid - 1)

4. Multiple Recursion:

Multiple recursion occurs when a function makes more than two recursive calls within itself. This type of recursion is commonly seen in problems involving tree structures or nested data.

Example: traversing a binary tree.

def fibonacci(n):
    ifn <= 1:
        return n
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

5. Indirect Recursion:

Indirect recursion occurs when function A calls function B, and then function B calls function A (either directly or indirectly). The calls alternate between the functions.

Example: functions to compute even and odd Fibonacci numbers.

def is_even(n):
    if n == 0:
        return True
    else:
        return is_odd(n - l)

def is_odd(n):
    if n == 0:
        return False
    else:
        return is_even(n - l)

6. Nested Recursion:

Nested recursion occurs when a recursive call passes the result of another recursive call as a parameter. This type of recursion tends to have exponential time complexity.

Example: Ackermann function.

def ackermann(m, n):
    if m == 0:
        return n + 1
    elif n == 0:
        return ackermann(m - 1, 1)
    else:
        return ackermann(m - 1, ackermann(m, n - l))

7. Mutual Recursion:

Mutual recursion involves two or more functions calling each other in a circular manner. Each function in the group calls one or more of the other functions.

Example: even and odd functions.

def is_even(n):
    if n == 0:
        return True
    else:
        return is_odd(n - l)

def is_odd(n):
    if n == 0:
        return False
    else:
        return is_even(n - l)

How do find if a Problem can be solved using Recursion ?

1. Divide and Conquer
2. Base Case
3. Repeated Sub-problems
4. Natural Recursive Structure
5. Recursive Patterns
6. Performance Considerations
7. Termination and Efficiency
8. Simplicity and Readability
